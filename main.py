import telebot
import os
import re
import json
import platform
from datetime import datetime
from threading import Lock
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from backend import DbAct
from db import DB

config_name = 'secrets.json'

def main():
    @bot.message_handler(commands=['start', 'admin'])
    def start(message):
        command = message.text.replace('/', '')
        user_id = message.from_user.id
        buttons = Bot_inline_btns()
        db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
        
        if command == 'start':
            if not db_actions.user_is_existed(user_id):
                bot.send_message(user_id, '<b>üíô–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>\n\n'
                '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è, —Ç—ã –º–æ–∂–µ—à—å:\n'
                '‚úî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ—Å\n'
                '‚úî –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                '‚úî –ó–∞–¥–∞–≤–∞—Ç—å —Å–µ–±–µ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã\n\n'
                'üòä –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É?',
                parse_mode='HTML', reply_markup=buttons.start_buttons())
            else:
                bot.send_message(user_id, f'<b>üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!</b>\n\n'
                'ü§ì –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç —Å–Ω–∏–∑—É –∏ –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ!\n\n',
                parse_mode='HTML', reply_markup=buttons.start_register_buttons())
            

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        user_id = call.message.chat.id
        buttons = Bot_inline_btns()
        if db_actions.user_is_existed(user_id):

            ######## USER ########
            ######## USER NO REG START ########
            if call.data == 'add_questions':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "üîπ –ß—Ç–æ —ç—Ç–æ?\n"
                "–≠—Ç–æ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "üîπ –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?\n"
                "‚úî –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞", parse_mode='HTML')
                bot.send_message(user_id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ1")
                db_actions.set_user_system_key(user_id, "index", 1)
            elif call.data == "settings_pressure":
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
                "üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–æ—Ä–º—ã\n" \
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 13)


            elif call.data == 'end_questions':
                db_actions.set_user_system_key(user_id, "index", None)
                # add to db datas about questions
                questions = db_actions.get_user_question(user_id)
                count = len(questions) if questions else 0
                bot.send_message(user_id, f"‚ùóÔ∏è –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {count} –≤–æ–ø—Ä–æ—Å–∞(–æ–≤)", reply_markup=buttons.end_question_two_buttons())
            
            ######## USER IS REG START ########
            elif call.data == 'morning':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> \n\n"
                f"üòá {datetime.today().day} —á–∏—Å–ª–æ - –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ.", parse_mode='HTML', reply_markup=buttons.morning_buttons())
            
            elif call.data == 'evening':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!</b> \n\n"
                "ü§ó –î–∞–≤–∞–π –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–≤—Ç—Ä–∞!", parse_mode='HTML', reply_markup=buttons.evening_buttons())
            
            elif call.data == 'pressure':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ</b>\n\n"
                "ü§ì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ü—Ä–∏–º–µ—Ä: 120/80", parse_mode="HTML")
                db_actions.set_user_system_key(user_id, "index", 15)
            
            elif call.data == 'reports':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìä –û—Ç—á–µ—Ç—ã:</b>\n\n" \
                "üßê –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è!", parse_mode="HTML", reply_markup=buttons.reports_buttons())
            
            elif call.data == 'reminders':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n" \
                "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", parse_mode="HTML", reply_markup=buttons.reminders_buttons())

            elif call.data == 'settings':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n" \
                "üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ!\n" \
                "‚úî –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n" \
                "‚úî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ\n" \
                "‚úî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏", parse_mode="HTML", reply_markup=buttons.settings_buttons())

            ######## MORNING BUTTONS ########
            elif call.data == 'reminders_today':
                # bot send message with today reminders
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == 'pressure_today':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å</b>\n\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 15)
            elif call.data == 'weight_today':
                # bot send message with request to add data about weight
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üí™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–µ—Å</b>\n\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 75", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 12)
        
            ######## EVENING BUTTONS ########
            elif call.data == 'plans_tomorrow':
                # bot send message with request to add data about plans at tomorrow
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == 'answer_on_questions':
                # bot send questions, user need answer
                db_actions.set_user_system_key(user_id, "index", None)
                question = db_actions.get_user_question(user_id)[0][1]
                bot.send_message(user_id, "<b>üìå –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n" \
                f"{question}", parse_mode='HTML')
                # db_actions.set_user_system_key(user_id, "index", ??)
            
            ######## REPORTS BUTTONS ########
            elif call.data == "pressure_report":
                # bot send xlsx with pressure?
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "weight_report":
                #bot send xlsx with weight?
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "questions_report":
                # bot send xlsx with q/a?
                db_actions.set_user_system_key(user_id, "index", None)

            ######## REMINDERS BUTTONS ########
            elif call.data == "reminders_today":
                # bot send reminders at today
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "all_reminders":
                # bot send all reminders
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "add_reminder":
                # user add remind
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "delete_reminder":
                # user delete remind
                db_actions.set_user_system_key(user_id, "index", None)
            elif call.data == "reminder_settings":
                # ???
                db_actions.set_user_system_key(user_id, "index", None)

            ######## SETTINGS BUTTONS ########
            elif call.data == "two_add_questions":
                db_actions.set_user_system_key(user_id, "index", None)
                # user add questions
            elif call.data == "delete_questions":
                db_actions.set_user_system_key(user_id, "index", None)
                questions = db_actions.get_user_question(user_id)
                if not questions:
                    bot.send_message(user_id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n'
                    'üìå –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö', reply_markup=buttons.add_question_btns())
                questions_list = []
                for idx, (q_id, q_text) in enumerate(questions, start=1):
                    questions_list.append(f"{idx}. {q_text}")
                questions_text = "\n".join(questions_list)
                bot.send_message(
                    user_id,
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{questions_text}")
                db_actions.set_user_system_key(user_id, "index", 11)
            elif call.data == "pressure_settings":
                # pressure settings
                db_actions.set_user_system_key(user_id, "index", None)
                pressure_settings = db_actions.get_user_pressure_setting(user_id)[0][0]
                pills_settings = db_actions.get_user_pressure_setting(user_id)[0][1]
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è:</b>\n\n" \
                "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" \
                f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–∞–≤–ª–µ–Ω–∏—è: {pressure_settings}\n"
                f"üíä –¢–∞–±–ª–µ—Ç–∫–∏: {pills_settings}", parse_mode='HTML', reply_markup=buttons.pressure_settings())
            elif call.data == 'set_pressure':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 16)
            elif call.data == 'set_pills':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, '<b>üìå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏!<b>')
                db_actions.set_user_system_key(user_id, "index", 17)




    @bot.message_handler(content_types=['text', 'photo'])
    def text_message(message):
        user_input = message.text
        user_id = message.chat.id
        buttons = Bot_inline_btns()
        code = db_actions.get_user_system_key(user_id, "index")
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):
                # 0-10 codes for user questions
                if code != 11 and code in range(1, 11):
                    db_actions.write_user_question(user_id, code, user_input)
                    code += 1
                    db_actions.set_user_system_key(user_id, "index", code)
                    bot.send_message(user_id, f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ{code}", reply_markup=buttons.end_question_buttons())
                elif code == 11:
                    # code for delete question
                    # user_input = question_id
                    db_actions.delete_user_question(user_input, user_id)
                    bot.send_message(user_id, '‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!')
                elif code == 12:
                    # code for add data about user max weight
                    db_actions.add_user_weight(user_id, user_input)
                    bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=buttons.reports_buttons())
                elif code == 13:
                    # 13 and 14 codes for user pressure settings
                    db_actions.set_user_system_key(user_id, "pressure", user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–µ—Å–µ–Ω—ã!</b>\n\n" \
                    "üìå –ö–∞–∫–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ —Ç–∞–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏?", parse_mode='HTML')
                    db_actions.set_user_system_key(user_id, "index", 14)
                elif code == 14:
                    pressure = db_actions.get_user_system_key(user_id, "pressure")
                    db_actions.add_user_settings(user_id, pressure, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã!</b>", parse_mode='HTML')
                elif code == 15:
                    # code for user input pressure today
                    db_actions.add_pressure_user(user_id, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã</b>\n\n"
                    f"–í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {user_input}", parse_mode='HTML')
                    pressure_settings = db_actions.get_user_pressure_setting(user_id)[0][0]
                    pills_settings = db_actions.get_user_pressure_setting(user_id)[0][1]
                    if pressure_settings and pills_settings:
                        max_systolic, max_diastolic = map(int, pressure_settings.split('/'))
                        now_systolic, now_diastolic = map(int, user_input.split('/'))
                        if now_systolic >= max_systolic or now_diastolic >= max_diastolic:
                            bot.send_message(user_id, "<b>‚ö†Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!</b>\n\n" \
                            f"üíä –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏—è–Ω—è—Ç—å: {pills_settings}", parse_mode='HTML')
                        else:
                            bot.send_message(user_id, '<b>üìä –í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º!</b>\n–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! ‚úÖ', parse_mode='HTML')
                    else:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä–æ–≥–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö!", reply_markup=buttons.end_question_two_buttons())
                elif code == 16:
                    db_actions.update_user_pressure_setting(user_id, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode='HTML')
                elif code == 17:
                    db_actions.update_user_pills_setting(user_id, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode='HTML')
                

    
    
    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config)
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()