import time
import telebot
import os
import re
import json
import threading
import platform
from datetime import datetime
from threading import Lock
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from backend import DbAct
from db import DB

config_name = 'secrets.json'

def main():
    @bot.message_handler(commands=['start', 'admin'])
    def start(message):
        command = message.text.replace('/', '')
        user_id = message.from_user.id
        buttons = Bot_inline_btns()
        if command == 'start':
            db_actions.set_user_system_key(user_id, "index", None)
            if db_actions.user_is_existed(user_id) == False:
                db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
                bot.send_message(user_id, '<b>üíô–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>\n\n'
                '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è, —Ç—ã –º–æ–∂–µ—à—å:\n'
                '‚úî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ—Å\n'
                '‚úî –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                '‚úî –ó–∞–¥–∞–≤–∞—Ç—å —Å–µ–±–µ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã\n\n'
                'üòä –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É?',
                parse_mode='HTML', reply_markup=buttons.start_buttons())
            else:
                bot.send_message(user_id, f'<b>üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!</b>\n\n'
                'ü§ì –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç —Å–Ω–∏–∑—É –∏ –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ!\n\n',
                parse_mode='HTML', reply_markup=buttons.start_register_buttons())
        elif command == 'admin':
            bot.send_message(user_id, "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å!</b>"
                             "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ!", reply_markup=buttons.admin_buttons(), parse_mode='HTML')
            

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        user_id = call.message.chat.id
        buttons = Bot_inline_btns()
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):
                if call.data == 'export_users':
                    db_actions.db_export_xlsx()
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])

            ######## USER ########
            ######## USER NO REG START ########
            if call.data == 'add_questions':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "üîπ –ß—Ç–æ —ç—Ç–æ?\n"
                "–≠—Ç–æ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "üîπ –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?\n"
                "‚úî –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞", parse_mode='HTML')
                bot.send_message(user_id, "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ1")
                db_actions.set_user_system_key(user_id, "index", 1)
            elif call.data == "settings_pressure":
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
                "üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–æ—Ä–º—ã\n" \
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 13)


            elif call.data == 'end_questions':
                db_actions.set_user_system_key(user_id, "index", None)
                # ad to db datas about questions
                questions = db_actions.get_user_question(user_id)
                count = len(questions) if questions else 0
                bot.send_message(user_id, f"‚ùóÔ∏è –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {count} –≤–æ–ø—Ä–æ—Å–∞(–æ–≤)", reply_markup=buttons.end_question_two_buttons())
            
            ######## USER IS REG START ########
            elif call.data == 'morning':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> \n\n"
                f"üòá {datetime.today().day} —á–∏—Å–ª–æ - –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ.", parse_mode='HTML', reply_markup=buttons.morning_buttons())
            
            elif call.data == 'evening':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!</b> \n\n"
                "ü§ó –î–∞–≤–∞–π –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–≤—Ç—Ä–∞!", parse_mode='HTML', reply_markup=buttons.evening_buttons())
            
            elif call.data == 'pressure':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ</b>\n\n"
                "ü§ì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ü—Ä–∏–º–µ—Ä: 120/80", parse_mode="HTML")
                db_actions.set_user_system_key(user_id, "index", 15)
            
            elif call.data == 'reports':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìä –û—Ç—á–µ—Ç—ã:</b>\n\n" \
                "üßê –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è!", parse_mode="HTML", reply_markup=buttons.reports_buttons())
            
            elif call.data == 'reminders':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n" \
                "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", parse_mode="HTML", reply_markup=buttons.reminders_buttons())

            elif call.data == 'settings':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n" \
                "üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ!\n" \
                "‚úî –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n" \
                "‚úî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ\n" \
                "‚úî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏", parse_mode="HTML", reply_markup=buttons.settings_buttons())

            ######## MORNING BUTTONS ########
            elif call.data == 'reminders_today':
                # bot send message with today reminders
                db_actions.set_user_system_key(user_id, "index", None)
                today = datetime.now().date()
                
                # –ü–æ–ª—É—á–∞–µ–º timestamp –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è
                start_of_day = int(datetime.combine(today, datetime.min.time()).timestamp())
                end_of_day = int(datetime.combine(today, datetime.max.time()).timestamp())
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                reminds = db_actions.get_today_reminders(user_id, start_of_day, end_of_day)
                
                if not reminds:
                    bot.send_message(user_id, "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
                reminds_list = []
                for idx, remind in enumerate(reminds, start=1):
                    remind_time = datetime.fromtimestamp(remind[2])
                    formatted_time = remind_time.strftime('%H:%M')
                    reminds_list.append(f"{idx}. {remind[1]} - {formatted_time}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                today_str = today.strftime('%d.%m.%Y')
                bot.send_message(
                    user_id,
                    f"üìÖ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str}):\n\n" +
                    "\n".join(reminds_list)
                )
            elif call.data == 'pressure_today':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å</b>\n\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 15)
            elif call.data == 'weight_today':
                # bot send message with request to add data about weight
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üí™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–µ—Å</b>\n\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 75", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 12)
        
            ######## EVENING BUTTONS ########
            elif call.data == 'plans_tomorrow':
                # bot send message with request to add data about plans at tomorrow
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞!</b>\n\n" \
                "–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –º–Ω–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n" \
                "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 18)

            elif call.data == 'answer_on_questions':
                # bot send questions, user need answer
                db_actions.set_user_system_key(user_id, "index", None)
                questions = db_actions.get_user_question(user_id)
                
                if not questions:
                    bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
                    return
                db_actions.set_user_system_key(user_id, "pending_questions", 
                                            [q[0] for q in questions])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º IDs –≤–æ–ø—Ä–æ—Å–æ–≤
                db_actions.set_user_system_key(user_id, "current_question_index", 0)
                first_question = questions[0][1]  # questions[0][1] - —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                bot.send_message(
                    user_id,
                    "<b>üìå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
                    f"1/{len(questions)}. {first_question}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                    parse_mode='HTML'
                )
                db_actions.set_user_system_key(user_id, "index", 21)
            
            ######## REPORTS BUTTONS ########
            elif call.data == "pressure_report":
                # bot send xlsx with pressure
                db_actions.set_user_system_key(user_id, "index", None)
                try:
                    db_actions.get_pressure_report(user_id)
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])
                except Exception:
                    bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")
            elif call.data == "weight_report":
                #bot send xlsx with weight
                db_actions.set_user_system_key(user_id, "index", None)
                try:
                    db_actions.get_weight_report(user_id)
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])
                except Exception:
                    bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")
            elif call.data == "questions_report":
                # bot send xlsx with q/a
                db_actions.set_user_system_key(user_id, "index", None)
                try:
                    db_actions.get_question_answer_report(user_id)
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])
                except Exception:
                    bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")

            ######## REMINDERS BUTTONS ########
            elif call.data == "all_reminders":
                # bot send all reminders
                db_actions.set_user_system_key(user_id, "index", None)
                reminds = db_actions.get_user_remind_by_userid(user_id)
                
                if not reminds:
                    bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminds_list = []
                for idx, remind in enumerate(reminds, start=1):
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ—Ä—Ç–µ–∂–∞
                    remind_id = remind[0]  # row_id
                    remind_text = remind[1]  # —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    remind_timestamp = remind[2]  # –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    remind_time = datetime.fromtimestamp(remind_timestamp)
                    formatted_time = remind_time.strftime('%d.%m.%Y %H:%M')
                    
                    reminds_list.append(f"{idx}. {remind_text} - {formatted_time}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫
                bot.send_message(
                    user_id,
                    "üìÑ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(reminds_list),
                    parse_mode="HTML"
                )

            elif call.data == "add_reminder":
                # user add remind
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞!</b>\n\n" \
                "–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –º–Ω–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n" \
                "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 18)

            elif call.data == "delete_reminder":
                # user delete remind
                db_actions.set_user_system_key(user_id, "index", None)
                reminds = db_actions.get_user_remind_by_userid(user_id)
                
                if not reminds:
                    bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                reminds_list = []
                for idx, remind in enumerate(reminds, start=1):
                    remind_id = remind[0]  # ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    remind_text = remind[1]  # –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    remind_timestamp = remind[2]  # –í—Ä–µ–º—è –≤ timestamp
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    remind_time = datetime.fromtimestamp(remind_timestamp)
                    formatted_time = remind_time.strftime('%d.%m.%Y %H:%M')
                    
                    reminds_list.append(
                        f"{idx}. {remind_text} - {formatted_time} [ID: {remind_id}]"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(
                    user_id,
                    "üìÑ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" +
                    "\n".join(reminds_list) +
                    "\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                    "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode="HTML"
                )
                db_actions.set_user_system_key(user_id, "index", 20)


            elif call.data == 'no_repeat':
                bot.send_message(user_id, '‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω!')

            elif call.data == 'repeat_everyday':
                bot.send_message(user_id, '‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω!')
            
            elif call.data == 'repeat_everyweek':
                bot.send_message(user_id, '‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω!')

            elif call.data == 'repeat_everymonth':
                bot.send_message(user_id, '‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω!')
            
            elif call.data == 'repeat_my_days':
                bot.send_message(user_id, '‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω!')



            ######## SETTINGS BUTTONS ########
            elif call.data == "two_add_questions":
                db_actions.set_user_system_key(user_id, "index", None)
                questions = db_actions.get_user_question(user_id)
                count = len(questions) if questions else 0
                if count >= 10:
                    bot.send_message(user_id, "<b>‚ùå –£ –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤!</b>", parse_mode='HTML')
                else:
                    bot.send_message(user_id, "üìå –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")
                    db_actions.set_user_system_key(user_id, "index", 1)
            elif call.data == "delete_questions":
                db_actions.set_user_system_key(user_id, "index", None)
                questions = db_actions.get_user_question(user_id)
                if not questions:
                    bot.send_message(user_id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!\n\n'
                    'üìå –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö', reply_markup=buttons.add_question_btns())
                    return
                questions_list = []
                for idx, (q_id, q_text, *_) in enumerate(questions, start=1):  # *_ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    questions_list.append(f"{idx}. {q_text} [ID: {q_id}]")
                questions_text = "\n".join(questions_list)
                bot.send_message(
                    user_id,
                    "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n" +
                    "\n".join(questions_list) +
                    "\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID –≤–æ–ø—Ä–æ—Å–∞</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    parse_mode='HTML'
                )
                db_actions.set_user_system_key(user_id, "index", 11)
            elif call.data == "pressure_settings":
                # pressure settings
                db_actions.set_user_system_key(user_id, "index", None)
                if not db_actions.get_user_pressure_setting(user_id):
                    bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö!", reply_markup=buttons.pressure_settings())
                    db_actions.set_user_system_key(user_id, "index", None)
                    return  
                pressure_settings = db_actions.get_user_pressure_setting(user_id)[0][0]
                pills_settings = db_actions.get_user_pressure_setting(user_id)[0][1]
                bot.send_message(user_id, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è:</b>\n\n" \
                "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" \
                f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–∞–≤–ª–µ–Ω–∏—è: {pressure_settings}\n"
                f"üíä –¢–∞–±–ª–µ—Ç–∫–∏: {pills_settings}", parse_mode='HTML', reply_markup=buttons.pressure_settings())
            elif call.data == 'set_pressure':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, "<b>üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n" \
                "‚ùï –ü—Ä–∏–º–µ—Ä: 140/90", parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 16)
            elif call.data == 'set_pills':
                db_actions.set_user_system_key(user_id, "index", None)
                bot.send_message(user_id, '<b>üìå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏!</b>\n\n', parse_mode='HTML')
                db_actions.set_user_system_key(user_id, "index", 17)




    @bot.message_handler(content_types=['text'])
    def text_message(message):
        user_input = message.text
        user_id = message.chat.id
        buttons = Bot_inline_btns()
        code = db_actions.get_user_system_key(user_id, "index")
        if db_actions.user_is_existed(user_id):
            # 0-10 codes for user questions
            if code != 11 and code in range(1, 11):
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    questions = db_actions.get_user_question(user_id)
                    count = len(questions) if questions else 0
                    if count >= 10:
                        bot.send_message(user_id, "<b>‚ùå –£ –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤!</b>", parse_mode='HTML')
                        db_actions.set_user_system_key(user_id, "index", None)
                    else:
                        db_actions.write_user_question(user_id, code, user_input)
                        code += 1
                        db_actions.set_user_system_key(user_id, "index", code)
                        bot.send_message(user_id, f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ{code}", reply_markup=buttons.end_question_buttons())
            elif code == 11:
                # code for delete question
                try:
                    if user_input.strip() == "0":
                        bot.send_message(user_id, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        db_actions.set_user_system_key(user_id, "index", None)
                    question_id = int(user_input.strip())
                    if not question_id:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞!")
                        return
                    else:
                        check_question = db_actions.question_is_exist(user_id, question_id)
                        if not check_question:
                            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                            return
                        else:
                            db_actions.delete_user_question(question_id, user_id)
                            bot.send_message(user_id, '‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!')
                            db_actions.set_user_system_key(user_id, "index", None)

                except:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞!")
            elif code == 12:
                # code for add data about user today weight
                if len(user_input) > 3:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!")
                    db_actions.set_user_system_key(user_id, "index", None)
                    return
                else:
                    try:
                        weight = int(user_input)
                        db_actions.add_user_weight(user_id, weight)
                        bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=buttons.reports_buttons())
                    except:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!")
                    
            elif code == 13:
                # 13 and 14 codes for user pressure settings
                try:
                    now_systolic, now_diastolic = map(int, user_input.split('/'))
                    if now_systolic and now_diastolic:
                        db_actions.set_user_system_key(user_id, "pressure", user_input)
                        bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–µ—Å–µ–Ω—ã!</b>\n\n" \
                        "üìå –ö–∞–∫–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏ —Ç–∞–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏?", parse_mode='HTML')
                        db_actions.set_user_system_key(user_id, "index", 14)
                    else:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 120/60")
                except:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!")
            elif code == 14:
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    pressure = db_actions.get_user_system_key(user_id, "pressure")
                    db_actions.add_user_settings(user_id, pressure, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã!</b>", parse_mode='HTML')
            elif code == 15:
                # code for user input pressure today
                try:
                    now_systolic, now_diastolic = map(int, user_input.split('/'))
                    if now_systolic and now_diastolic:
                        if now_systolic > 180 or now_diastolic > 140 or now_systolic < 50 or now_diastolic < 50:
                            bot.send_message(user_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                            return
                        else:
                            bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã</b>\n\n"
                            f"–í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {user_input}", parse_mode='HTML')
                            if not db_actions.get_user_pressure_setting(user_id):
                                bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö!", reply_markup=buttons.pressure_settings())
                                return  
                            pressure_settings = db_actions.get_user_pressure_setting(user_id)[0][0]
                            pills_settings = db_actions.get_user_pressure_setting(user_id)[0][1]
                        if pressure_settings and pills_settings:
                            max_systolic, max_diastolic = map(int, pressure_settings.split('/'))
                            if now_systolic >= max_systolic or now_diastolic >= max_diastolic:
                                bot.send_message(user_id, "<b>‚ö†Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!</b>\n\n" \
                                f"üíä –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏—è–Ω—è—Ç—å: {pills_settings}", parse_mode='HTML')
                                bot.send_message(user_id, "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–∞–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è!")
                                db_actions.set_user_system_key(user_id, "now_pressure", user_input)
                                db_actions.set_user_system_key(user_id, "index", 22)
                            else:
                                bot.send_message(user_id, '<b>üìä –í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º!</b>\n–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! ‚úÖ', parse_mode='HTML')
                                cause = '–î–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ'
                                db_actions.add_pressure_user(user_id, user_input, cause)
                        else:
                            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä–æ–≥–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö!", reply_markup=buttons.end_question_two_buttons())
                    else:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 120/60")
                except:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!")
            elif code == 16:
                # 16 and 17 codes for user_settings
                try:
                    now_systolic, now_diastolic = map(int, user_input.split('/'))
                    if now_systolic and now_diastolic:
                        if now_systolic > 180 or now_diastolic > 140 or now_systolic < 50 or now_diastolic < 50:
                            bot.send_message(user_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                            return
                        else:
                            db_actions.update_user_pressure_setting(user_id, user_input)
                            bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode='HTML')
                    else:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 120/60")
                except:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!")
            elif code == 17:
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    db_actions.update_user_pills_setting(user_id, user_input)
                    bot.send_message(user_id, "<b>‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode='HTML')
                    db_actions.set_user_system_key(user_id, "index", None)

            elif code == 18:
                # 18 and 19 codes for user reminders at tommorow
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    db_actions.set_user_system_key(user_id, "remind", user_input)
                    bot.send_message(user_id, "<b>‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ–± —ç—Ç–æ–º?</b>\n" \
                    "–ü—Ä–∏–º–µ—Ä: <b>25.12.2025 18:00</b>", parse_mode='HTML')
                    db_actions.set_user_system_key(user_id, "index", 19)
            elif code == 19:
                remind = db_actions.get_user_system_key(user_id, "remind")
                try:
                    time_dt = datetime.strptime(user_input, '%d.%m.%Y %H:%M')
                    timestamp = int(time_dt.timestamp())
                    if time_dt < datetime.now():
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞!\n" \
                        "–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º!\n\n" \
                        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑, –ø—Ä–∏–º–µ—Ä: <b>25.12.2025 18:00</b>", parse_mode='HTML')
                        db_actions.set_user_system_key(user_id, "index", 19)
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ü—Ä–∏–º–µ—Ä: <b>25.12.2025 18:00</b>", parse_mode='HTML')
                    db_actions.set_user_system_key(user_id, "index", 19)
                db_actions.add_user_remind(user_id, remind, timestamp)
                bot.send_message(user_id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=buttons.repeat_reminder_buttons())
                db_actions.set_user_system_key(user_id, "index", None)

            elif code == 20:
                try:
                    if user_input.strip() == "0":
                        bot.send_message(user_id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                        db_actions.set_user_system_key(user_id, "index", None)
                    remind_id = int(user_input)
                    if not remind_id:
                        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                        return
                    else:
                        check_remind = db_actions.reminder_is_exist(user_id, remind_id)
                        if not check_remind:
                            bot.send_message(user_id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                            return
                        else:
                            db_actions.mark_reminder_as_unactive(user_id, remind_id)
                            bot.send_message(user_id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
                            db_actions.set_user_system_key(user_id, "index", None)

                except:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

            elif code == 21:
                question_ids = db_actions.get_user_system_key(user_id, "pending_questions")
                current_idx = db_actions.get_user_system_key(user_id, "current_question_index")
                question_id = question_ids[current_idx]
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    db_actions.add_user_answer(user_id, question_id, user_input)
                    if current_idx + 1 < len(question_ids):
                        next_question = db_actions.get_question_by_id(question_ids[current_idx + 1])
                        db_actions.set_user_system_key(user_id, "current_question_index", current_idx + 1)
                        bot.send_message(
                            user_id,
                            f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                            f"<b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n\n"
                            f"{current_idx + 2}/{len(question_ids)}. {next_question[1]}\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                            parse_mode='HTML'
                        )
                    else:
                        bot.send_message(user_id, "‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –°–ø–∞—Å–∏–±–æ!")
                        db_actions.set_user_system_key(user_id, "index", None)

            elif code == 22:
                if len(user_input) > 120:
                    bot.send_message(user_id, "<b>‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 120 —Å–∏–º–≤–æ–ª–æ–≤", parse_mode='HTML')
                    return
                else:
                    pressure = db_actions.get_user_system_key(user_id, "now_pressure")
                    db_actions.add_pressure_user(user_id, pressure, user_input)
                    bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                    db_actions.set_user_system_key(user_id, "index", None)

    def check_reminders():
        while True:
            current_time = int(time.time())
            reminders = db_actions.get_user_remind(current_time)
            for reminder in reminders:
                try:
                    bot.send_message(reminder['user_id'], f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n<b>{reminder['reminder']}</b>", parse_mode='HTML')
                    db_actions.mark_reminder_as_completed(reminder['id'])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞! - {e}")
            time.sleep(60)

    threading.Thread(target=check_reminders, daemon=True).start()
    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()